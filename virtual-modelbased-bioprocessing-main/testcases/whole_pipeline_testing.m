%% TESTING : Whole pipeline testing function
%   Function that tests the entire library pipeline, from data to modelling
%   to running simulation and optimization
%
%   Input : data, Xv, F, initial_conditions, constraints, index_data,
%           lambda_ranking, distance_type, normalization_flag,
%           N_sensitivity, sensitivity_bounds
%
%
%   Output : model, optimization_results, simulated data prediction based
%           on MBE solution and model fit on uptake-secretion rates
%

function [model, ...
            optimization_results, ...
            optimization_results_ranked, ...
            model_concentrations_predictions_mbe,...
            model_rates_predictions_mbe,...
            model_rates_predictions_direct,...
            qext_data,...
            cext_data,...
            cin_data] = whole_pipeline_testing(datafiles,...
                                                modelling_options,...
                                                operation_parameters,...
                                                optimization_options,...
                                                model) % the last argument to be removed, as it should be extracted from data
    disp('Evaluating model from data...');
    % model = get_model_from_data_testing(datafiles, modelling_options, operation_parameters);
    disp('Evaluating predictions using the model...')
    [model_concentrations_predictions_mbe,...
            model_rates_predictions_mbe,...
            model_rates_predictions_direct,...
            qext_data,...
            cext_data,...
            cin_data] = get_model_predictions_testing(model, datafiles, optimization_options.index_data);
    disp('Ranked optimization using the model (available data as initial conditions)...')
    [optimization_results, optimization_results_ranked] = get_ranked_optimization_results(model, optimization_options);
end

